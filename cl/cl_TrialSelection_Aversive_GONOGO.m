function TRIALS = cl_TrialSelection_Aversive_GONOGO(TRIALS)
% TRIALS = cl_TrialSelection_Aversive_GONOGO(TRIALS)
% 
% TRIALS is a structure which has many subfields used during an experiment.
% Below are some important subfields:
% 
% TRIALS.TrialIndex  ... Keeps track of each completed trial
% TRIALS.trials      ... A cell matrix in which each column is a different
%                        parameter and each row is a unique set of
%                        parameters (called a "trial")
% TRIALS.readparams  ... Parameter tag names for reading values from a
%                        running TDT circuit. The position of the parameter
%                        tag name in this array is the same as the position
%                        of its corresponding parameters (column) in
%                        TRRIALS.trials.
% TRIALS.writeparams ... Parameter tag names writing values from a
%                        running TDT circuit. The position of the parameter
%                        tag name in this array is the same as the position
%                        of its corresponding parameters (column) in
%                        TRIALS.trials.
% TRIALS.TrialCount  ... This field is an Nx1 integer array with N unique
%                        trials. Indices get incremented each time that
%                        trial is run.
% TRIALS.NextTrialID ... Update this field with a scalar index to indicate
%                        which trial to run next.
%
%
% See also, SelectTrial

persistent nNOGOs

TT.NOGO = 1;
TT.GO   = 0;
TT.REMIND = 2;

for fn = string(fieldnames(TRIALS.writeParamIdx))'
    all.(fn) = [TRIALS.trials{:,TRIALS.writeParamIdx.(fn)}];
end


% make first trial NO GO
if TRIALS.TrialIndex == 1
    TRIALS.NextTrialID = find(all.TrialType == TT.NOGO);
    return
end




history.Depth = [TRIALS.DATA.Depth];
history.TrialType = [TRIALS.DATA.TrialType];
history.Reminder = [TRIALS.DATA.Reminder];








% Make Software parameters easier to acces
% note: these software parameters are generated by the gui which launches
% after the first trial, therefore they can only be accessed after the GUI
% has been created
sp = TRIALS.S.Module.Parameters;
sn = {sp.validName};
for j = 1:length(sp), SP.(sn{j}) = sp(j); end


% Determine if enough consecutive NOGO trials have been presented
NOGOmax = SP.ConsecutiveNOGO_max.Value;
NOGOmin = SP.ConsecutiveNOGO_min.Value;



if isempty(nNOGOs)
    nNOGOs = randi([NOGOmin, NOGOmax]);
end

nBack = min(nNOGOs,TRIALS.TrialIndex-1);

% how many NOGOs have we had in the last n trials?
nRecentNOGOs = sum(history.TrialType(end-nBack+1:end)==TT.NOGO);
if nRecentNOGOs < nNOGOs % next trial must be a NOGO
    TRIALS.NextTrialID = find(all.TrialType == TT.NOGO,1);
    return
end





% set nNOGOs for next block
nNOGOs = randi([NOGOmin, NOGOmax]);




% REMINDER Trials
if SP.ReminderTrials.Value
    TRIALS.NextTrialID = find(all.Reminder,1);
    return
end

activeTrials = false(size(all.TrialType));
activeTrials(all.TrialType~=TT.REMIND) = TRIALS.activeTrials;


valid.Depth = all.Depth(activeTrials & all.TrialType == TT.GO);
valid.TrialType = all.TrialType(activeTrials & all.TrialType == TT.GO);


lastDepth = history.Depth(find(history.TrialType==TT.GO,1,'last'));


% time for a GO trial
switch SP.TrialOrder.Value
    case 'Descending'
        valid.Depth = sort(valid.Depth,'descend');
        if isempty(lastDepth),lastDepth = inf; end
        lastDepth = double(lastDepth)-1e-4;
        i = find(valid.Depth < lastDepth,1);
        if isempty(i)
            nextDepth = max(valid.Depth);
        else
            nextDepth = valid.Depth(i);
        end

    case 'Ascending'
        valid.Depth = sort(valid.Depth,'ascend');
        if isempty(lastDepth),lastDepth = -inf; end
        lastDepth = double(lastDepth)+1e-4;
        i = find(valid.Depth > lastDepth,1);
        if isempty(i)
            nextDepth = min(valid.Depth);
        else
            nextDepth = valid.Depth(i);
        end

    case 'Random'
        % TO DO: ADD RULE FOR MAX CONSECUTIVE NOGO TRIALS
        % if isempty(lastDepth),lastDepth = 0; end
        % n = sum(history.TrialType(end-NOGOmax:end)==TT.GO);
        % if n > NOGOmax % next trial must be GO (1)
        %     idx = find(valid.TrialType==TT.GO);
        % elseif n < NOGOmin % next trial must be NOGO (0)
        %     idx = find(valid.TrialType==TT.GO);
        % else
        %     idx = 1:length(history.TrialType);
        % end
        % r = randi(length(idx));
        % i = idx(r);
        % nextDepth = valid.Depth(i);

end

TRIALS.NextTrialID = find(all.Depth == nextDepth & ~all.Reminder);

