classdef History < handle

    properties
        PsychophysicsObj

        ParametersOfInterest (:,1) cell
    end

    properties (SetAccess = private)
        TableH
        ContainerH

        ColumnName
        Data
        Info

        hl_NewData
    end


    methods

        function obj = History(pObj,container)
            if nargin < 2 || isempty(container), container = figure; end
            
            obj.ContainerH = container;

            obj.build;
            
            if nargin >= 1 && ~isempty(pObj)
                obj.PsychophysicsObj = pObj;
            end

            obj.hl_NewData = listener(pObj.Helper,'NewData',@obj.update);
        end

        function delete(obj)
            try
                delete(obj.hl_NewData);
            end
        end
        
        function build(obj)
            obj.TableH = uitable(obj.ContainerH,'Unit','Normalized', ...
                'Position',[0 0 1 1],'RowStriping','off');
        end
        
        
        function update(obj,src,event)
            if isempty(obj.PsychophysicsObj.DATA), return; end

            % Call a function to rearrange DATA to make it easier to use (see below).
            obj.rearrange_data;

            % Flip the DATA matrix so that the most recent trials are displayed at the
            % top of the table.
            obj.TableH.Data = flipud(obj.Data);

            % set the row names as the trial ids
            obj.TableH.RowName = flipud(obj.Info.TrialID);

            % set the column names
            obj.TableH.ColumnName = obj.ColumnName;
            
            obj.update_row_colors;
        end
        
        function set.PsychophysicsObj(obj,pobj)
            assert(epsych.Helper.valid_psych_obj(pobj),'gui.History:set.PsychophysicsObj', ...
                'PsychophysicsObj must be from the toolbox "psychophysics"');
            obj.PsychophysicsObj = pobj;
            obj.update;
        end
    end

    methods (Access = private)
        function update_row_colors(obj)
            if ~epsych.Helper.valid_psych_obj(obj.PsychophysicsObj), return; end
            C(size(obj.Data,1),3) = 0;
            R = cellfun(@epsych.BitMask,obj.Data(:,2),'uni',0);
            R = [R{:}];
            for i = 1:length(obj.PsychophysicsObj.BitsInUse)
                ind = R == obj.PsychophysicsObj.BitsInUse(i);
                if ~any(ind), continue; end
                C(ind,:) = repmat(obj.PsychophysicsObj.BitColors(i,:),sum(ind),1);
            end
            obj.TableH.BackgroundColor = flipud(C);
            obj.TableH.RowStriping = 'on';
        end
        
        function rearrange_data(obj)           
            requiredParams = {'ResponseCode','TrialID','inaccurateTimestamp'};
            DataIn = obj.PsychophysicsObj.DATA;

            if ~isempty(obj.ParametersOfInterest)
                ftr = setdiff(fieldnames(DataIn),[obj.ParametersOfInterest;requiredParams']);
                DataIn = rmfield(DataIn,ftr);
            end
            
            if isempty(DataIn(1).TrialID)
                obj.Data = [];
                return
            end
            
            % Trial numbers
            obj.Info.TrialID = [DataIn.TrialID]';
            
            % Crude timestamp of when the trial occured.  This is not indended for use
            % in data analysis.  For physiology analysis use timestamps generated by the TDT hardware
            % since it is much more accurate and precise.
            td = [DataIn.inaccurateTimestamp] - DataIn(1).inaccurateTimestamp;
            td.Format = "mm:ss";
            obj.Info.RelativeTimestamp = string(td); 
            

            Response = obj.PsychophysicsObj.ResponsesChar;
            
            % ignore array fields 
            ind = structfun(@(a) numel(a)>1,DataIn(1));
            fn = fieldnames(DataIn);
            fn = fn(ind);
            fn = fn(:)';

            % remove these fields
            DataIn = rmfield(DataIn,[requiredParams,fn]);
            
            % The remaining fields of the DATA structure contain parameters for each trial.
            DataOut = squeeze(struct2cell(DataIn))';
            

            % prefix Timestamp and Respnose fields
            DataOut = [Response DataOut];

            DataOut = [cellstr(obj.Info.RelativeTimestamp(:)) DataOut];
            
            obj.ColumnName = [{'Time'}; {'Response'}; fieldnames(DataIn)];
            
            obj.Data = DataOut;
        end
    end
end