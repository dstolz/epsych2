classdef History < gui.Helper

                % TODO: Display only watchedParams
                % TODO: Make context menu for user customization
                % TODO: Colorize rows based on response
    properties
        physObj
        BoxID       (1,1)  uint8 {mustBeNonempty,mustBeNonNan} = 1;
    end

    properties (SetAccess = private)
        TableH
        ContainerH

        ColumnName
        Data
        Info
        
        el_NewPhysData
    end
    
    methods

        function obj = History(pObj,container,watchedParams,BoxID)
            narginchk(1,4);
            
            
            obj.physObj = pObj;
            
            if nargin < 2 || isempty(container), container = figure;        end
            if nargin < 3 || isempty(watchedParams), watchedParams = 'all'; end
            if nargin < 4 || isempty(BoxID), BoxID = 1;                     end

            obj.ContainerH = container;
            obj.BoxID = BoxID;

            if isequal(lower(watchedParams),'all')
                
                
                
            end

            obj.build;
            
            
        end

        function build(obj)
            obj.TableH = uitable(obj.ContainerH,'Unit','Normalized', ...
                'Position',[0 0 1 1],'RowStriping','off');
        end
        
        
        function update(obj,src,event)
            
            % Call a function to rearrange DATA to make it easier to use (see below).
            obj.rearrange_data;

            if isempty(obj.Data), return ;end
            
            % Flip the DATA matrix so that the most recent trials are displayed at the
            % top of the table.
            obj.TableH.Data = flipud(obj.Data);

            % set the row names as the trial ids
            obj.TableH.RowName = flipud(obj.Info.TrialID);

            % set the column names
            obj.TableH.ColumnName = obj.ColumnName;
            
            obj.update_row_colors;
        end
        
        function set.physObj(obj,pobj)
%             assert(epsych.Helper.valid_psych_obj(pobj),'gui.History:set.physObj', ...
%                 'physObj must be from the toolbox "phys"');
            obj.physObj = pobj;
            obj.update;
        end

        
        function set.BoxID(obj,id)
            obj.BoxID = id;
            delete(obj.el_NewPhysData); % destroy old listener and create a new one for the new BoxID
            obj.el_NewPhysData = addlistener(obj.physObj,'NewPhysData',@obj.update);
        end
    end

    methods (Access = private)
        function update_row_colors(obj)
            if ~epsych.Helper.valid_psych_obj(obj.physObj), return; end
            C(size(obj.Data,1),3) = 0;
            R = cellfun(@epsych.Bitmask,obj.Data(:,2),'uni',0);
            R = [R{:}];
            for i = 1:length(obj.physObj.BitmaskInUse)
                ind = R == obj.physObj.BitmaskInUse(i);
                if ~any(ind), continue; end
                C(ind,:) = repmat(obj.physObj.PerformanceColors(i,:),sum(ind),1);
            end
            obj.TableH.BackgroundColor = flipud(C);
            obj.TableH.RowStriping = 'on';
        end
        
        function rearrange_data(obj)           
            DataIn = obj.physObj.DATA;
            
            if isempty(DataIn) || isempty(DataIn(1).TrialID)
                obj.Data = [];
                return
            end
            
            % Trial numbers
            obj.Info.TrialID = [DataIn.TrialID]';
            
            % Crude timestamp of when the trial occured.  This is not indended for use
            % in data analysis.  For physiology analysis use timestamps generated by the TDT hardware
            % since it is much more accurate and precise.
            td = cellfun(@(a) etime(a,DataIn(1).ComputerTimestamp),{DataIn.ComputerTimestamp});            
            tdStr = cellfun(@(a,b) sprintf('%d:%02d',a,b),num2cell(floor(td/60)),num2cell(floor(mod(td,60))),'uni',0);
            obj.Info.RelativeTimestamp = tdStr(:);            
            

            Response = obj.physObj.ResponsesChar;
            
            
            % remove these fields
            DataIn = rmfield(DataIn,{'ResponseCode','TrialID','ComputerTimestamp'});
            
            % The remaining fields of the DATA structure contain parameters for each
            % trial.
            dataFields = fieldnames(DataIn);
            for i = 1:length(dataFields)
                DataOut(:,i) = {DataIn.(dataFields{i})};
            end
            % prefix Timestamp and Respnose fields
            DataOut = [Response DataOut];

            DataOut = [obj.Info.RelativeTimestamp DataOut];
            
            obj.ColumnName = [{'Time'}; {'Response'}; dataFields];
            
            obj.Data = DataOut;
        end
    end
end